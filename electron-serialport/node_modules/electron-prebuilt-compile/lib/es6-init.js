'use strict';

var _electron = require('electron');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _electronCompile = require('electron-compile');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findPackageJson(initScript) {
  if (initScript === '/' || initScript.match(/^[A-Za-z]:$/)) {
    throw new Error("Can't find package.json");
  }

  // Walk up the parent directories until we find package.json. Make sure that
  // we're not actually stumbling upon a parent npm package
  let ret = _path2.default.join(initScript, 'package.json');
  if (_fs2.default.statSyncNoException(ret) && !_path2.default.resolve(_path2.default.dirname(ret), '..').match(/[\\\/]node_modules$/i)) {
    return ret;
  }

  return findPackageJson(_path2.default.dirname(initScript));
}

/**
 * Some debugger environment reconstruct process argument and inject args ignoring original order,
 * extract to find out right path for init script.
 *
 */
function getInitScriptPath() {
  const rawArgv = process.argv.filter(x => x.indexOf(`--inspect=`) === -1 && x.indexOf(`--debug-brk`))[2];
  return _path2.default.resolve(rawArgv);
}

function main() {
  const initScript = getInitScriptPath();
  const packageJson = findPackageJson(initScript);
  const appPath = _path2.default.dirname(packageJson);
  const packageJsonData = JSON.parse(_fs2.default.readFileSync(packageJson, 'utf8'));

  _electron.app.setName(packageJsonData.productName || packageJsonData.name);
  _electron.app.setVersion(packageJsonData.version);
  _electron.app.setAppPath(appPath);

  // Reconstitute the original arguments
  const args = process.argv.slice(2);
  process.argv = [process.argv[0]].concat(args);

  //passthrough electron-compile command args if it's specified
  const parsedArgs = require('yargs').alias('c', 'cachedir').alias('s', 'sourcemapdir').argv;
  (0, _electronCompile.init)(_path2.default.dirname(packageJson), initScript, null, parsedArgs.c || null, parsedArgs.s || null);
}

main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lczYtaW5pdC5qcyJdLCJuYW1lcyI6WyJmaW5kUGFja2FnZUpzb24iLCJpbml0U2NyaXB0IiwibWF0Y2giLCJFcnJvciIsInJldCIsInBhdGgiLCJqb2luIiwiZnMiLCJzdGF0U3luY05vRXhjZXB0aW9uIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJnZXRJbml0U2NyaXB0UGF0aCIsInJhd0FyZ3YiLCJwcm9jZXNzIiwiYXJndiIsImZpbHRlciIsIngiLCJpbmRleE9mIiwibWFpbiIsInBhY2thZ2VKc29uIiwiYXBwUGF0aCIsInBhY2thZ2VKc29uRGF0YSIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsImFwcCIsInNldE5hbWUiLCJwcm9kdWN0TmFtZSIsIm5hbWUiLCJzZXRWZXJzaW9uIiwidmVyc2lvbiIsInNldEFwcFBhdGgiLCJhcmdzIiwic2xpY2UiLCJjb25jYXQiLCJwYXJzZWRBcmdzIiwicmVxdWlyZSIsImFsaWFzIiwiYyIsInMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUEsU0FBU0EsZUFBVCxDQUF5QkMsVUFBekIsRUFBcUM7QUFDbkMsTUFBSUEsZUFBZSxHQUFmLElBQXNCQSxXQUFXQyxLQUFYLENBQWlCLGFBQWpCLENBQTFCLEVBQTJEO0FBQ3pELFVBQU0sSUFBSUMsS0FBSixDQUFVLHlCQUFWLENBQU47QUFDRDs7QUFFRDtBQUNBO0FBQ0EsTUFBSUMsTUFBTUMsZUFBS0MsSUFBTCxDQUFVTCxVQUFWLEVBQXNCLGNBQXRCLENBQVY7QUFDQSxNQUFJTSxhQUFHQyxtQkFBSCxDQUF1QkosR0FBdkIsS0FBK0IsQ0FBQ0MsZUFBS0ksT0FBTCxDQUFhSixlQUFLSyxPQUFMLENBQWFOLEdBQWIsQ0FBYixFQUFnQyxJQUFoQyxFQUFzQ0YsS0FBdEMsQ0FBNEMsc0JBQTVDLENBQXBDLEVBQXlHO0FBQ3ZHLFdBQU9FLEdBQVA7QUFDRDs7QUFFRCxTQUFPSixnQkFBZ0JLLGVBQUtLLE9BQUwsQ0FBYVQsVUFBYixDQUFoQixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsU0FBU1UsaUJBQVQsR0FBNkI7QUFDM0IsUUFBTUMsVUFBVUMsUUFBUUMsSUFBUixDQUFhQyxNQUFiLENBQXFCQyxDQUFELElBQU9BLEVBQUVDLE9BQUYsQ0FBVyxZQUFYLE1BQTRCLENBQUMsQ0FBN0IsSUFBa0NELEVBQUVDLE9BQUYsQ0FBVyxhQUFYLENBQTdELEVBQXVGLENBQXZGLENBQWhCO0FBQ0EsU0FBT1osZUFBS0ksT0FBTCxDQUFhRyxPQUFiLENBQVA7QUFDRDs7QUFFRCxTQUFTTSxJQUFULEdBQWdCO0FBQ2QsUUFBTWpCLGFBQWFVLG1CQUFuQjtBQUNBLFFBQU1RLGNBQWNuQixnQkFBZ0JDLFVBQWhCLENBQXBCO0FBQ0EsUUFBTW1CLFVBQVVmLGVBQUtLLE9BQUwsQ0FBYVMsV0FBYixDQUFoQjtBQUNBLFFBQU1FLGtCQUFrQkMsS0FBS0MsS0FBTCxDQUFXaEIsYUFBR2lCLFlBQUgsQ0FBZ0JMLFdBQWhCLEVBQTZCLE1BQTdCLENBQVgsQ0FBeEI7O0FBRUFNLGdCQUFJQyxPQUFKLENBQVlMLGdCQUFnQk0sV0FBaEIsSUFBK0JOLGdCQUFnQk8sSUFBM0Q7QUFDQUgsZ0JBQUlJLFVBQUosQ0FBZVIsZ0JBQWdCUyxPQUEvQjtBQUNBTCxnQkFBSU0sVUFBSixDQUFlWCxPQUFmOztBQUVBO0FBQ0EsUUFBTVksT0FBT25CLFFBQVFDLElBQVIsQ0FBYW1CLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBYjtBQUNBcEIsVUFBUUMsSUFBUixHQUFlLENBQUNELFFBQVFDLElBQVIsQ0FBYSxDQUFiLENBQUQsRUFBa0JvQixNQUFsQixDQUF5QkYsSUFBekIsQ0FBZjs7QUFFQTtBQUNBLFFBQU1HLGFBQWFDLFFBQVEsT0FBUixFQUFpQkMsS0FBakIsQ0FBdUIsR0FBdkIsRUFBNEIsVUFBNUIsRUFBd0NBLEtBQXhDLENBQThDLEdBQTlDLEVBQW1ELGNBQW5ELEVBQW1FdkIsSUFBdEY7QUFDQSw2QkFBS1QsZUFBS0ssT0FBTCxDQUFhUyxXQUFiLENBQUwsRUFBZ0NsQixVQUFoQyxFQUE0QyxJQUE1QyxFQUFrRGtDLFdBQVdHLENBQVgsSUFBZ0IsSUFBbEUsRUFBd0VILFdBQVdJLENBQVgsSUFBZ0IsSUFBeEY7QUFDRDs7QUFFRHJCIiwiZmlsZSI6ImVzNi1pbml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtpbml0fSBmcm9tICdlbGVjdHJvbi1jb21waWxlJztcblxuZnVuY3Rpb24gZmluZFBhY2thZ2VKc29uKGluaXRTY3JpcHQpIHtcbiAgaWYgKGluaXRTY3JpcHQgPT09ICcvJyB8fCBpbml0U2NyaXB0Lm1hdGNoKC9eW0EtWmEtel06JC8pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBwYWNrYWdlLmpzb25cIik7XG4gIH1cblxuICAvLyBXYWxrIHVwIHRoZSBwYXJlbnQgZGlyZWN0b3JpZXMgdW50aWwgd2UgZmluZCBwYWNrYWdlLmpzb24uIE1ha2Ugc3VyZSB0aGF0XG4gIC8vIHdlJ3JlIG5vdCBhY3R1YWxseSBzdHVtYmxpbmcgdXBvbiBhIHBhcmVudCBucG0gcGFja2FnZVxuICBsZXQgcmV0ID0gcGF0aC5qb2luKGluaXRTY3JpcHQsICdwYWNrYWdlLmpzb24nKVxuICBpZiAoZnMuc3RhdFN5bmNOb0V4Y2VwdGlvbihyZXQpICYmICFwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKHJldCksICcuLicpLm1hdGNoKC9bXFxcXFxcL11ub2RlX21vZHVsZXMkL2kpKSB7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHJldHVybiBmaW5kUGFja2FnZUpzb24ocGF0aC5kaXJuYW1lKGluaXRTY3JpcHQpKTtcbn1cblxuLyoqXG4gKiBTb21lIGRlYnVnZ2VyIGVudmlyb25tZW50IHJlY29uc3RydWN0IHByb2Nlc3MgYXJndW1lbnQgYW5kIGluamVjdCBhcmdzIGlnbm9yaW5nIG9yaWdpbmFsIG9yZGVyLFxuICogZXh0cmFjdCB0byBmaW5kIG91dCByaWdodCBwYXRoIGZvciBpbml0IHNjcmlwdC5cbiAqXG4gKi9cbmZ1bmN0aW9uIGdldEluaXRTY3JpcHRQYXRoKCkge1xuICBjb25zdCByYXdBcmd2ID0gcHJvY2Vzcy5hcmd2LmZpbHRlcigoeCkgPT4geC5pbmRleE9mKGAtLWluc3BlY3Q9YCkgPT09IC0xICYmIHguaW5kZXhPZihgLS1kZWJ1Zy1icmtgKSlbMl07XG4gIHJldHVybiBwYXRoLnJlc29sdmUocmF3QXJndik7XG59XG5cbmZ1bmN0aW9uIG1haW4oKSB7XG4gIGNvbnN0IGluaXRTY3JpcHQgPSBnZXRJbml0U2NyaXB0UGF0aCgpO1xuICBjb25zdCBwYWNrYWdlSnNvbiA9IGZpbmRQYWNrYWdlSnNvbihpbml0U2NyaXB0KTtcbiAgY29uc3QgYXBwUGF0aCA9IHBhdGguZGlybmFtZShwYWNrYWdlSnNvbik7XG4gIGNvbnN0IHBhY2thZ2VKc29uRGF0YSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhY2thZ2VKc29uLCAndXRmOCcpKTtcblxuICBhcHAuc2V0TmFtZShwYWNrYWdlSnNvbkRhdGEucHJvZHVjdE5hbWUgfHwgcGFja2FnZUpzb25EYXRhLm5hbWUpO1xuICBhcHAuc2V0VmVyc2lvbihwYWNrYWdlSnNvbkRhdGEudmVyc2lvbik7XG4gIGFwcC5zZXRBcHBQYXRoKGFwcFBhdGgpO1xuXG4gIC8vIFJlY29uc3RpdHV0ZSB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG4gIGNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gIHByb2Nlc3MuYXJndiA9IFtwcm9jZXNzLmFyZ3ZbMF1dLmNvbmNhdChhcmdzKTtcblxuICAvL3Bhc3N0aHJvdWdoIGVsZWN0cm9uLWNvbXBpbGUgY29tbWFuZCBhcmdzIGlmIGl0J3Mgc3BlY2lmaWVkXG4gIGNvbnN0IHBhcnNlZEFyZ3MgPSByZXF1aXJlKCd5YXJncycpLmFsaWFzKCdjJywgJ2NhY2hlZGlyJykuYWxpYXMoJ3MnLCAnc291cmNlbWFwZGlyJykuYXJndjtcbiAgaW5pdChwYXRoLmRpcm5hbWUocGFja2FnZUpzb24pLCBpbml0U2NyaXB0LCBudWxsLCBwYXJzZWRBcmdzLmMgfHwgbnVsbCwgcGFyc2VkQXJncy5zIHx8IG51bGwpO1xufVxuXG5tYWluKClcbiJdfQ==